<?php

class ZippyCourses_Sendfox_API extends Zippy_EmailListIntegrationAPI
{
    public      $id = 'sendfox';
    public      $service = 'sendfox';
    protected   $api_key;
    protected   $api_version = 3;
    protected   $api_url_base = 'https://api.sendfox.com/';

    public function __construct()
    {
        $settings = $this->getSettingValues();

        $this->api_key      = $settings['api_key'];
    }

    public function validateSettings()
    {
        if (empty($this->api_key)) {
            return false;
        }

        return true;
    }

    public function subscribe(ZippyCourses_Student $student, Zippy_EmailList $list)
    {
        $zippy = Zippy::instance();
        $student->fetch();
        $args = array(
            'email'    => $student->email,
            'first_name'    => $student->first_name,
            'last_name'    => $student->last_name,
            'lists' => array($list->id)
        );

        $endpoint = "/contacts";

        $response = $this->request($this->getUrl($endpoint), 'POST', $args);
     
        return $response && !is_wp_error($response) ? true : false;
    }


    public function unsubscribe(ZippyCourses_Student $student, Zippy_EmailList $list)
    {
        $zippy = Zippy::instance();
        $student->fetch();
        $args = array(
            'email'    => $student->email
        );

        $endpoint = "courses/{$list->id}/unsubscribe";
        $response = $this->request($this->getUrl($endpoint), 'POST', $args);
        return $response && !is_wp_error($response) ? true : false;
    }

    /**
     * Makes the API Request
     * @since  1.0.0
     * @param  url $url Generated by getUrl function
     * @param  string $method Indicate the method of a request (defaults to GET)
     * @param  array $args Additional arguments to be passed via Query String
     * @return $response Response Object from wp_remote_post
     */
    public function request($url, $method = 'GET', $args = '')
    {
       
        if (!$this->validateSettings()) {
            return new WP_Error(__('Your Convert Kit settings are missing.', 'as-sizc'));
        }

        $params = array(
            'method' => $method,
            'headers' => array(
                'Authorization' => "Bearer ".$this->api_key,
		        'Content-type' => 'application/json',
                )
        );
        
        if ($method == 'POST' && $args !== '') {
            $params['body'] = json_encode($args);
        }
       
        $response = wp_remote_post($url, $params);
        
        return !is_wp_error($response) ? json_decode($response['body']) : $response;
    }

    public function filterRequestParameters($args = array())
    {
        return array_merge($args, array('k' => $this->api_key, 'v' => $this->api_version));
    }

    public function getSettingValues()
    {
        $default_keys = array('api_key');

        $settings = array_filter((array) get_option($this->getSettingsName()));

        foreach ($default_keys as $key) {
            if (!isset($settings[$key])) {
                $settings[$key] = '';
            }
        }

        return $settings;
    }

    public function getSettingsName()
    {
        return 'zippy_' . $this->service . '_email_integration_settings';
    }

    /**
     * Generates the URL used for an API Call
     * @since   1.0.0
     * @param  string $endpoint API Action
     * @return string URL for API Call
     */
    public function getUrl($endpoint, array $args = array())
    {
        
        return $this->api_url_base . $endpoint ;
    }

    /**
     * Get all Lists
     * @since  1.0.0
     * @return object Zippy_EmailListRepository
     */
    public function getLists()
    {
        
      
        $zippy = Zippy::instance();
        if (false === false) {
            // It wasn't there, so regenerate the data and save the transient
            $lists = $this->fetchLists();
            set_transient($this->getTransientName('lists'), $lists->toArray('name'), HOUR_IN_SECONDS);
        } else {
            $repository = $zippy->make('email_list_repository');
            foreach ($lists as $list_key => $list_value) {
                $list = $zippy->make($this->getBinding('list'), array('id' => $list_key, 'name' => $list_value));
                $repository->add($list);
            }

            $lists = $repository;
        }
        return $lists;
    }

    public function fetchLists()
    {
        $zippy = Zippy::instance();
    
       
        $response = $this->request($this->getUrl("lists"));
      
        
        $lists = $zippy->make('email_list_repository');
        if (!is_wp_error($response)) {
            foreach ($response->data as $list) {
                $list = $zippy->make($this->getBinding('list'), array('id' => $list->id, 'name' => $list->name));
                $lists->add($list);
            }
        } else {
            $zippy->log->log($response->get_error_message());
        }
       
        return $lists;
    }

    public function getList($id)
    {
        $lists = $this->getLists();
        if (is_object($lists)) {
            foreach ($lists->items as $list) {
                if ($list->id == $id) {
                    return $list;
                }
            }
        }
    }

    public function getContact(ZippyCourses_Student $student, Zippy_EmailList $list)
    {
    }
}
